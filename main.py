import logging
import random
from telegram import (
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    JobQueue,
)
from datetime import datetime, timedelta
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
user_data = defaultdict(lambda: {
    "ice_cream_count": 0,
    "history": [],
    "dates": defaultdict(int),
    "flavors": defaultdict(int),
    "collection": defaultdict(int),
    "last_drop": None
})

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    [
        ["üë§ Profile", "üåê Social Media"],
        ["üìÇ Projects", "üç¶ Ice cream counter"],
        ["üìã Commands", "üéÅ Collection"]
    ],
    resize_keyboard=True,
    input_field_placeholder="Choose an action..."
)

# –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∫—É—Å—ã –º–æ—Ä–æ–∂–µ–Ω–æ–≥–æ
FLAVORS = {
    "chocolate": {"emoji": "üç´", "color": "üü§", "rarity": "common"},
    "vanilla": {"emoji": "‚ö™", "color": "üü°", "rarity": "common"},
    "strawberry": {"emoji": "üçì", "color": "üî¥", "rarity": "common"},
    "mint": {"emoji": "üü¢", "color": "üü¢", "rarity": "uncommon"},
    "caramel": {"emoji": "üü§", "color": "üü†", "rarity": "uncommon"},
    "blueberry": {"emoji": "üîµ", "color": "üîµ", "rarity": "uncommon"},
    "matcha": {"emoji": "üçµ", "color": "üü¢", "rarity": "rare"},
    "unicorn": {"emoji": "ü¶Ñ", "color": "üåà", "rarity": "rare"},
    "gold": {"emoji": "üåü", "color": "üåü", "rarity": "legendary"},
    "dragon": {"emoji": "üêâ", "color": "üî¥", "rarity": "legendary"}
}

RARITY_WEIGHTS = {
    "common": 50,
    "uncommon": 30,
    "rare": 15,
    "legendary": 5
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.message.from_user
    await update.message.reply_text(
        f"üåü Hi, {user.first_name}!\n"
        "Glad to see you here!\n"
        "I'm ready to show you my sjills and achievments.\n"
        "Every 3 hours you can get a random taste of ice cream.\n"
        "Try to collect them all!",
        reply_markup=main_keyboard
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–¥–∞—Ç—å –º–æ—Ä–æ–∂–µ–Ω–æ–µ
    await check_ice_cream_drop(update, context)

async def check_ice_cream_drop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–¥–∞—Ç—å –º–æ—Ä–æ–∂–µ–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_id = update.effective_user.id
    now = datetime.now()
    
    if user_data[user_id]["last_drop"] is None:
        # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ - –≤—ã–¥–∞–µ–º —Å—Ä–∞–∑—É
        await drop_random_flavor(update, context)
    else:
        last_drop = user_data[user_id]["last_drop"]
        if (now - last_drop) >= timedelta(hours=3):
            await drop_random_flavor(update, context)
        else:
            next_drop = last_drop + timedelta(hours=3)
            wait_time = next_drop - now
            hours = wait_time.seconds // 3600
            minutes = (wait_time.seconds % 3600) // 60
            await update.message.reply_text(
                f"‚è≥ The next ice cream can be abtained in {hours}h {minutes}min\n"
                f"‚åõ The last one was: {last_drop.strftime('%H:%M %d.%m.%Y')}"
            )

async def drop_random_flavor(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–∫—É—Å –º–æ—Ä–æ–∂–µ–Ω–æ–≥–æ."""
    user_id = update.effective_user.id
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–∫—É—Å —Å —É—á–µ—Ç–æ–º —Ä–µ–¥–∫–æ—Å—Ç–∏
    flavors_by_rarity = {}
    for flavor, data in FLAVORS.items():
        if data["rarity"] not in flavors_by_rarity:
            flavors_by_rarity[data["rarity"]] = []
        flavors_by_rarity[data["rarity"]].append(flavor)
    
    # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–¥–∫–æ—Å—Ç–∏
    chosen_rarity = random.choices(
        list(RARITY_WEIGHTS.keys()),
        weights=list(RARITY_WEIGHTS.values()),
        k=1
    )[0]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–∫—É—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
    chosen_flavor = random.choice(flavors_by_rarity[chosen_rarity])
    flavor_data = FLAVORS[chosen_flavor]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]["collection"][chosen_flavor] += 1
    user_data[user_id]["last_drop"] = datetime.now()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏
    rarity_messages = {
        "common": "Not bad!",
        "uncommon": "Good catch!",
        "rare": "Magnificently!",
        "legendary": "Unbelievably!!!"
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        f"üéâ {rarity_messages[chosen_rarity]} You got:\n"
        f"{flavor_data['emoji']} <b>{chosen_flavor.capitalize()}</b> ice cream !\n"
        f"Rarity: {chosen_rarity.capitalize()}\n\n"
        f"Now you have {user_data[user_id]['collection'][chosen_flavor]} pc. of this taste",
        parse_mode="HTML"
    )

async def show_collection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –º–æ—Ä–æ–∂–µ–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    collection = user_data[user_id]["collection"]
    
    if not collection:
        await update.message.reply_text(
            "‚ùå Your collection is empty!\n"
            "Try to get your first ice cream through command /ice_cream",
            reply_markup=main_keyboard
        )
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    flavors_by_rarity = {}
    for flavor, count in collection.items():
        rarity = FLAVORS[flavor]["rarity"]
        if rarity not in flavors_by_rarity:
            flavors_by_rarity[rarity] = []
        flavors_by_rarity[rarity].append((flavor, count))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ (–æ—Ç –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∫ –æ–±—ã—á–Ω—ã–º)
    sorted_rarities = sorted(flavors_by_rarity.items(), 
                           key=lambda x: list(RARITY_WEIGHTS.keys()).index(x[0]))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = ["<b>üç® Your ice cream collection:</b>\n"]
    
    for rarity, flavors in sorted_rarities:
        message.append(f"\n<b>{rarity.capitalize()}:</b>")
        for flavor, count in sorted(flavors):
            emoji = FLAVORS[flavor]["emoji"]
            message.append(f"{emoji} {flavor.capitalize()}: {count} —à—Ç.")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_flavors = sum(collection.values())
    unique_flavors = len(collection)
    percentage = (unique_flavors / len(FLAVORS)) * 100
    
    message.append(f"\n\n<b>üìä Statistic:</b>")
    message.append(f"All ice cream: {total_flavors}")
    message.append(f"Unique flavors: {unique_flavors} –∏–∑ {len(FLAVORS)} ({percentage:.1f}%)")
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    progress = int((unique_flavors / len(FLAVORS)) * 20)
    message.append("\n" + "üü©" * progress + "‚¨ú" * (20 - progress))
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ Check the drop", callback_data="check_drop")],
        [InlineKeyboardButton("üç¶ Add to statistic", callback_data="add_to_stats")]
    ])
    
    await update.message.reply_text(
        "\n".join(message),
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –º–æ—Ä–æ–∂–µ–Ω–æ–≥–æ."""
    user_id = update.effective_user.id
    total_ice_cream = user_data[user_id]["ice_cream_count"]
    unique_flavors = len(user_data[user_id]["collection"])
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –º–æ—Ä–æ–∂–µ–Ω–æ–≥–æ
    ice_cream_chart = generate_ice_cream_chart(user_data[user_id])
    
    profile_text = f"""
<b>üë§ Personal information:</b>

<u>Basic data:</u>
‚Ä¢ name: di9star
‚Ä¢ age: 16 years old
‚Ä¢ location: Belarus, Minsk

<u>Skills:</u>
üêç Python (Django, Flask, Pygame)
üåê JavaScript (React, Node.js)
üì± Frontend/Beckend (HTML, CSS, JavaScript)
ü§ñ Bots (Telegram, Discord)

<u>Ice cream statistic:</u>
üç¶ Has been eaten in total : <b>{total_ice_cream}</b> –ø–æ—Ä—Ü–∏–π
üé® Unque flavors: <b>{unique_flavors}</b> –∏–∑ {len(FLAVORS)}
{ice_cream_chart}

<u>Education:</u>
üéì secondary education
üìÖ algoritmika courses
üíª college MRK

<u>Work experience:</u>
‚Ä¢ Special websait for college
‚Ä¢ Some websaits for games
‚Ä¢ Some bots 
"""

    photo_url = "https://via.placeholder.com/400x300?text=Developer+Photo"
    
    try:
        await update.message.reply_photo(
            photo=photo_url,
            caption=profile_text,
            parse_mode="HTML"
        )
    except:
        await update.message.reply_text(
            profile_text,
            parse_mode="HTML"
        )

def generate_ice_cream_chart(user_data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –º–æ—Ä–æ–∂–µ–Ω–æ–≥–æ."""
    if not user_data["flavors"]:
        return "üìäNo taste data yet"
    
    total = sum(user_data["flavors"].values())
    chart = []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    sorted_flavors = sorted(user_data["flavors"].items(), key=lambda x: x[1], reverse=True)
    
    for flavor, count in sorted_flavors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5
        emoji = FLAVORS.get(flavor, {}).get("emoji", "üç¶")
        percentage = (count / total) * 100
        bar = "‚¨õ" * int(percentage / 10)
        chart.append(f"{emoji} {flavor.capitalize():<10} {bar} {count:>3} ({percentage:.1f}%)")
    
    return "\n".join(chart)

async def social_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Social media."""
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÇ GitHub", url="https://github.com/nastuh")],
        [InlineKeyboardButton("üíº Instagram", url="https://linkedin.com")],
        [InlineKeyboardButton("üì± Telegram", url="https://t.me/@di9star")],
        [InlineKeyboardButton("üê¶ FicBook", url="https://ficbook.net/authors/018d176f-55e9-7fbd-952d-b22e3583a0ab")],
    ])
    await update.message.reply_text(
        "üîó My social media:",
        reply_markup=keyboard
    )

async def projects(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Projects with links on GitHub."""
    projects_text = """
<b>üìÇ My projects:</b>

1. <b>Telegram –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤</b>
   - Python, aiogram, PostgreSQL
   - üîó <a href="https://github.com/example/finance-bot">GitHub</a>

2. <b>–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∑–∞–¥–∞—á</b>
   - Django, React, Docker
   - üîó <a href="https://github.com/example/task-manager">GitHub</a>

3. <b>–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤</b>
   - Kivy, Python, SQLite
   - üîó <a href="https://github.com/example/language-app">GitHub</a>

4. <b>API –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã</b>
   - FastAPI, MongoDB, Redis
   - üîó <a href="https://github.com/example/delivery-api">GitHub</a>
"""
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚≠ê All projects", url="https://github.com/nastuh")],
    ])
    
    await update.message.reply_text(
        projects_text,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

async def ice_cream_counter(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—á–µ—Ç—á–∏–∫ –º–æ—Ä–æ–∂–µ–Ω–æ–≥–æ —Å –∫—Ä–∞—Å–∏–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ–π."""
    user_id = update.effective_user.id
    today = datetime.now().strftime("%Y-%m-%d")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if today not in user_data[user_id]["dates"]:
        user_data[user_id]["dates"][today] = 0
    
    stats_text = generate_ice_cream_stats(user_data[user_id])
    
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üç´ chocolate", callback_data="flavor_chocolate"),
            InlineKeyboardButton("‚ö™ vanilla", callback_data="flavor_vanilla"),
        ],
        [
            InlineKeyboardButton("üçì strawberry", callback_data="flavor_strawberry"),
            InlineKeyboardButton("üü¢ mint", callback_data="flavor_mint"),
        ],
        [
            InlineKeyboardButton("üü§ caramel", callback_data="flavor_caramel"),
            InlineKeyboardButton("üîµ blueberry", callback_data="flavor_blueberry"),
        ],
        [InlineKeyboardButton("üìä Stats", callback_data="show_stats")],
        [InlineKeyboardButton("üîÑ Rest counter", callback_data="reset_counter")],
    ])
    
    await update.message.reply_text(
        f"üç¶ Ice cream counter\n\n{stats_text}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

def generate_ice_cream_stats(user_data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–∏–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    today = datetime.now().strftime("%Y-%m-%d")
    total = user_data["ice_cream_count"]
    today_count = user_data["dates"].get(today, 0)
    week_count = sum(user_data["dates"].get((datetime.now() - timedelta(days=i)).strftime("%Y-%m-%d"), 0) 
                for i in range(7))
    
    # –ö—Ä–∞—Å–∏–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –ø—Å–µ–≤–¥–æ–≥—Ä–∞—Ñ–∏–∫–æ–π
    table = [
        "<b>üìä Statistic </b>",
        "",
        "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì",
        f"‚îÉ {'Indicator':<18} ‚îÉ {' Value':>7} ‚îÉ",
        "‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïã‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´",
        f"‚îÉ {'today':<18} ‚îÉ {today_count:>7} ‚îÉ",
        f"‚îÉ {'this week':<18} ‚îÉ {week_count:>7} ‚îÉ",
        f"‚îÉ {'all':<18} ‚îÉ {total:>7} ‚îÉ",
        "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îª‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ",
        "",
        "<b>üç® Popular flavors:</b>"
    ]
    
    # –¢–æ–ø-3 –≤–∫—É—Å–∞
    if user_data["flavors"]:
        top_flavors = sorted(user_data["flavors"].items(), key=lambda x: x[1], reverse=True)[:3]
        for i, (flavor, count) in enumerate(top_flavors, 1):
            emoji = FLAVORS.get(flavor, {}).get("emoji", "üç¶")
            table.append(f"{i}. {emoji} {flavor.capitalize()}: {count} servings")
    else:
        table.append("No taste data yet")
    
    return "\n".join(table)

def generate_detailed_stats(user_data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    today = datetime.now().strftime("%Y-%m-%d")
    total = user_data["ice_cream_count"]
    today_count = user_data["dates"].get(today, 0)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
    days_stats = []
    for i in range(7):
        date = (datetime.now() - timedelta(days=i)).strftime("%Y-%m-%d")
        count = user_data["dates"].get(date, 0)
        days_stats.append((date, count))
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∫—É—Å–∞–º
    flavors_stats = sorted(user_data["flavors"].items(), key=lambda x: x[1], reverse=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = [
        "<b>üç¶ Detail statistic</b>",
        "",
        "<b>üìÖ By day:</b>",
        "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì",
        "‚îÉ data         ‚îÉservings ‚îÉ",
        "‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïã‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´"
    ]
    
    for date, count in sorted(days_stats, reverse=True):
        message.append(f"‚îÉ {date} ‚îÉ {count:>7} ‚îÉ")
    
    message.extend([
        "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îª‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ",
        "",
        "<b>üç® By flavors:</b>",
        "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì",
        "‚îÉ flavor       ‚îÉservings ‚îÉ",
        "‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïã‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´"
    ])
    
    for flavor, count in flavors_stats:
        emoji = FLAVORS.get(flavor, {}).get("emoji", "üç¶")
        message.append(f"‚îÉ {emoji} {flavor.capitalize():<8} ‚îÉ {count:>7} ‚îÉ")
    
    message.append("‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îª‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ")
    
    return "\n".join(message)

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    today = datetime.now().strftime("%Y-%m-%d")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if today not in user_data[user_id]["dates"]:
        user_data[user_id]["dates"][today] = 0

    if data.startswith("flavor_"):
        flavor = data.split("_")[1]
        emoji = FLAVORS.get(flavor, {}).get("emoji", "üç¶")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        user_data[user_id]["ice_cream_count"] += 1
        user_data[user_id]["dates"][today] += 1
        user_data[user_id]["flavors"][flavor] += 1
        user_data[user_id]["history"].append({
            "date": datetime.now().strftime("%d.%m.%Y %H:%M"),
            "count": 1,
            "flavor": flavor
        })
        
        await query.answer(f"{emoji} +1 {flavor} ice cream! Today: {user_data[user_id]['dates'][today]}")
    
    elif data == "show_stats":
        detailed_stats = generate_detailed_stats(user_data[user_id])
        await query.answer()
        await query.edit_message_text(
            text=f"üç¶ Detail statistic\n\n{detailed_stats}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô back", callback_data="back_to_main")],
            ]),
            parse_mode="HTML"
        )
        return
    
    elif data == "reset_counter":
        user_data[user_id]["ice_cream_count"] = 0
        user_data[user_id]["history"] = []
        user_data[user_id]["dates"] = defaultdict(int)
        user_data[user_id]["flavors"] = defaultdict(int)
        user_data[user_id]["dates"][today] = 0
        await query.answer("Counter reset!")
    
    elif data == "back_to_main":
        stats_text = generate_ice_cream_stats(user_data[user_id])
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üç´ chocolate", callback_data="flavor_chocolate"),
                InlineKeyboardButton("‚ö™ vanilla", callback_data="flavor_vanilla"),
            ],
            [
                InlineKeyboardButton("üçì strawberry", callback_data="flavor_strawberry"),
                InlineKeyboardButton("üü¢ mint", callback_data="flavor_mint"),
            ],
            [
                InlineKeyboardButton("üü§ caramel", callback_data="flavor_caramel"),
                InlineKeyboardButton("üîµ blueberry", callback_data="flavor_blueberry"),
            ],
            [InlineKeyboardButton("üìä Stats", callback_data="show_stats")],
            [InlineKeyboardButton("üîÑ Reset counter", callback_data="reset_counter")],
        ])
        await query.edit_message_text(
            text=f"üç¶ Ice cream counter\n\n{stats_text}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        return
    elif data == "check_drop":
        await check_ice_cream_drop(update, context)
        return
    elif data == "add_to_stats":
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤–∫—É—Å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if user_data[user_id]["collection"]:
            last_flavor = max(user_data[user_id]["collection"].items(), key=lambda x: x[1])[0]
            user_data[user_id]["ice_cream_count"] += 1
            user_data[user_id]["flavors"][last_flavor] += 1
            user_data[user_id]["dates"][today] += 1
            user_data[user_id]["history"].append({
                "date": datetime.now().strftime("%d.%m.%Y %H:%M"),
                "count": 1,
                "flavor": last_flavor
            })
            await query.answer(f"üç¶ {last_flavor.capitalize()} add to statistic!")
        else:
            await query.answer("You don't have ice cream in your collection")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    stats_text = generate_ice_cream_stats(user_data[user_id])
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üç´ chocolate", callback_data="flavor_chocolate"),
            InlineKeyboardButton("‚ö™ vanilla", callback_data="flavor_vanilla"),
        ],
        [
            InlineKeyboardButton("üçì strawberry", callback_data="flavor_strawberry"),
            InlineKeyboardButton("üü¢ mint", callback_data="flavor_mint"),
        ],
        [
            InlineKeyboardButton("üü§ caramel", callback_data="flavor_caramel"),
            InlineKeyboardButton("üîµ blueberry", callback_data="flavor_blueberry"),
        ],
        [InlineKeyboardButton("üìä Stats", callback_data="show_stats")],
        [InlineKeyboardButton("üîÑ Reset counter", callback_data="reset_counter")],
    ])
    await query.edit_message_text(
        text=f"üç¶ Ice cream counter\n\n{stats_text}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def show_commands(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """List of commands."""
    text = """
<b>üìã Available commands:</b>

/start - Start working with the bot
/profile - Show my profile
/social - My social networks
/projects - My projects with links
/ice_cream - Ice cream counter
/collection - My ice cream collection
/commands - Show all commands


<i>You can also use the menu buttons.</i>
"""
    await update.message.reply_text(text, parse_mode="HTML")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token("your_bot_token").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("profile", profile))
    application.add_handler(CommandHandler("social", social_media))
    application.add_handler(CommandHandler("projects", projects))
    application.add_handler(CommandHandler("ice_cream", ice_cream_counter))
    application.add_handler(CommandHandler("collection", show_collection))
    application.add_handler(CommandHandler("commands", show_commands))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏)
    application.add_handler(MessageHandler(filters.Text(["üë§ Profile"]), profile))
    application.add_handler(MessageHandler(filters.Text(["üåê Social media"]), social_media))
    application.add_handler(MessageHandler(filters.Text(["üìÇ Projects"]), projects))
    application.add_handler(MessageHandler(filters.Text(["üç¶ Ice cream counter"]), ice_cream_counter))
    application.add_handler(MessageHandler(filters.Text(["üéÅ Collection"]), show_collection))
    application.add_handler(MessageHandler(filters.Text(["üìã Commands"]), show_commands))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_click))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
